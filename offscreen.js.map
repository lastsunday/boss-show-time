{"version":3,"file":"offscreen.js","mappings":"uBACIA,EAAsB,CAG1BA,E,GCHAA,EAAyBC,GAEZA,EAAU,MCHvBD,EAAwB,CAACE,EAAKC,IAAUC,OAAOC,UAAUC,eAAeC,KAAKL,EAAKC,GCAlFH,EAAwB,MCAxBA,EAAoBQ,EAAIC,SAASC,SAAWC,KAAKC,SAASC,KCG1D,MAAMC,EAAS,IAAIC,OAAO,IAAIC,IAAI,kBAAiC,CACjEC,UAAM,IAGRH,EAAOI,UAAY,SAAUC,GAC3B,IAAIC,EAAUD,EAAME,KAAKA,KA6C3B,IAAuCA,EA1CjCD,EAAQE,OAERF,EAAQG,WAERH,EAAQI,MAsCyBH,EAnCPD,EAoC9BK,OAAOC,QAAQC,YAAY,CACzBV,KArCsB,KAsCtBW,OAAQ,aACRP,SApCED,EAAQE,OAERF,EAAQG,WAERH,EAAQI,KAGd,EAEAC,OAAOC,QAAQG,UAAUC,aAAaX,IACpC,IAAIC,EAAUD,EAAME,KAGhBD,EAAQE,OAERF,EAAQG,WAERH,EAAQI,MAGZV,EAAOiB,YAAYX,GAGfA,EAAQE,OAERF,EAAQG,WAERH,EAAQI,KAEX,G","sources":["webpack://boss-show-time/webpack/bootstrap","webpack://boss-show-time/webpack/runtime/get javascript chunk filename","webpack://boss-show-time/webpack/runtime/hasOwnProperty shorthand","webpack://boss-show-time/webpack/runtime/publicPath","webpack://boss-show-time/webpack/runtime/jsonp chunk loading","webpack://boss-show-time/./src/offscreen/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"./\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t522: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","import { debugLog } from \"../log\";\ndebugLog(\"offscreen ready\");\n\nconst worker = new Worker(new URL(\"./worker.js\", import.meta.url), {\n  type: \"module\",\n});\n\nworker.onmessage = function (event) {\n  let message = event.data.data;\n  debugLog(\n    \"[offscreen][receive][worker -> offscreen] message [action=\" +\n      message.action +\n      \",callbackId=\" +\n      message.callbackId +\n      \",error=\" +\n      message.error +\n      \"]\"\n  );\n  sendMessageToBackground(\"db\", message);\n  debugLog(\n    \"[offscreen][send][offscreen -> background] message [action=\" +\n      message.action +\n      \",callbackId=\" +\n      message.callbackId +\n      \",error=\" +\n      message.error +\n      \"]\"\n  );\n};\n\nchrome.runtime.onMessage.addListener((event) => {\n  let message = event.data;\n  debugLog(\n    \"[offscreen][receive][background -> offscreen] message [action=\" +\n      message.action +\n      \",callbackId=\" +\n      message.callbackId +\n      \",error=\" +\n      message.error +\n      \"]\"\n  );\n  worker.postMessage(message);\n  debugLog(\n    \"[offscreen][send][offscreen -> worker] message [action=\" +\n      message.action +\n      \",callbackId=\" +\n      message.callbackId +\n      \",error=\" +\n      message.error +\n      \"]\"\n  );\n});\n\nfunction sendMessageToBackground(type, data) {\n  chrome.runtime.sendMessage({\n    type,\n    target: \"background\",\n    data,\n  });\n}\n"],"names":["__webpack_require__","chunkId","obj","prop","Object","prototype","hasOwnProperty","call","b","document","baseURI","self","location","href","worker","Worker","URL","type","onmessage","event","message","data","action","callbackId","error","chrome","runtime","sendMessage","target","onMessage","addListener","postMessage"],"sourceRoot":""}