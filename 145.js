(()=>{"use strict";var e,o,t={7145:(e,o,t)=>{const a=0,s=1,n=2,r=n;function i(e){r<=n&&console.log(e)}function b(e){r==a?console.trace(e):r==s&&console.warn(e)}var _=t(2556),l=t(4353),m=t.n(l);new Map;class j{jobId;jobPlatform;jobUrl;jobName;jobCompanyName;jobLocationName;jobAddress;jobLongitude;jobLatitude;jobDescription;jobDegreeName;jobYear;jobSalaryMin;jobSalaryMax;jobSalaryTotalMonth;jobFirstPublishDatetime;bossName;bossCompanyName;bossPosition;createDatetime;updateDatetime}class c extends j{browseCount}class d{getSqlList(){return[]}}class u extends d{getSqlList(){return["\n  CREATE TABLE job(\n    job_id TEXT PRIMARY KEY,\n    job_platform TEXT,\n    job_url TEXT, \n    job_name TEXT,\n    job_company_name TEXT,\n    job_location_name TEXT,\n    job_address TEXT,\n    job_longitude NUMERIC,\n    job_latitude NUMERIC,\n    job_description TEXT,\n    job_degree_name TEXT,\n    job_year NUMERIC,\n    job_salary_min NUMERIC,\n    job_salary_max NUMERIC,\n    job_salary_total_month NUMERIC,\n    job_first_publish_datetime DATETIME,\n    boss_name TEXT,\n    boss_company_name  TEXT,\n    boss_position TEXT,\n    create_datetime DATETIME,\n    update_datetime DATETIME\n  )\n  ","\n  CREATE TABLE job_browse_history(\n    job_id TEXT,\n    job_visit_datetime DATETIME,\n    job_visit_type TEXT\n  )\n  "]}}var p=[];class f{todayBrowseCount;totalBrowseCount;totalJob}class y{items;total}class h extends y{}let g;b("worker ready");let E=!1;const D={init:function(e,o){b("Loading and initializing sqlite3 module...");let t=[];t.push(new u),function(e){p=e}(t),(0,_.A)({print:b,printErr:i}).then((function(o){if(b("Done initializing. Running app..."),E)N(e);else try{M(o),E=!0,N(e)}catch(o){A(e,"init sqlite3 error : "+o.message)}}))},ping:function(e,o){N(e,"pong")},batchAddOrUpdateJobBrowse:function(e,o){try{const t=new Date;g.exec({sql:"BEGIN TRANSACTION"});for(let e=0;e<o.length;e++)w(o[e],t);g.exec({sql:"COMMIT"}),N(e,{})}catch(o){A(e,"[worker] addOrUpdateJobBrowse error : "+o.message)}},addOrUpdateJobBrowse:function(e,o){try{const t=new Date;g.exec({sql:"BEGIN TRANSACTION"}),w(o,t),g.exec({sql:"COMMIT"}),N(e,{})}catch(o){A(e,"[worker] addOrUpdateJobBrowse error : "+o.message)}},getJobBrowseInfoByIds:function(e,o){try{let a=new Map,s="'"+o.join("','")+"'";const n="SELECT job_id AS jobId ,count(*) AS total FROM job_browse_history WHERE job_id IN ("+s+") GROUP BY job_id;";let r=[];g.exec({sql:n,rowMode:"object",resultRows:r});for(let e=0;e<r.length;e++){let o=r[e];a.set(o.jobId,o.total)}let i=new Map;const b="SELECT job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,boss_name,boss_company_name,boss_position,create_datetime,update_datetime FROM job WHERE job_id in ("+s+")";let _=[];g.exec({sql:b,rowMode:"object",resultRows:_});for(let e=0;e<_.length;e++){let o=_[e],a=new c,s=Object.keys(o);for(let e=0;e<s.length;e++){let n=s[e];a[(t=n,t.replace(/\_(\w)/g,(function(e,o){return o.toUpperCase()})))]=o[n]}i.set(a.jobId,a)}let l=[];for(let e=0;e<o.length;e++){let t=o[e],s=i.get(t);s&&(s.browseCount=a.get(t)),l.push(s)}N(e,l)}catch(o){A(e,"[worker] getJobBrowseInfoByIds error : "+o.message)}var t},searchJob:function(e,o){try{let t=new h,a="SELECT job_id AS jobId,job_platform AS jobPlatform,job_url AS jobUrl,job_name AS jobName,job_company_name AS jobCompanyName,job_location_name AS jobLocationName,job_address AS jobAddress,job_longitude AS jobLongitude,job_latitude AS jobLatitude,job_description AS jobDescription,job_degree_name AS jobDegreeName,job_year AS jobYear,job_salary_min AS jobSalaryMin,job_salary_max AS jobSalaryMax,job_salary_total_month AS jobSalaryTotalMonth,job_first_publish_datetime AS jobFirstPublishDatetime,boss_name AS bossName,boss_company_name AS bossCompanyName,boss_position AS bossPosition,create_datetime AS createDatetime,update_datetime AS updateDatetime FROM job",s="SELECT COUNT(*) AS total from job",n="",r=" ORDER BY create_datetime DESC",i=" limit "+(o.pageNum-1)*o.pageSize+","+o.pageSize;o.jobName&&(n+=" AND job_name LIKE '%"+o.jobName+"%' "),o.jobCompanyName&&(n+=" AND job_company_name LIKE '%"+o.jobCompanyName+"%' "),o.startDatetime&&(n+=" AND create_datetime >= '"+m()(o.startDatetime).format("YYYY-MM-DD HH:mm:ss")+"'"),o.endDatetime&&(n+=" AND create_datetime < '"+m()(o.endDatetime).format("YYYY-MM-DD HH:mm:ss")+"'"),o.firstPublishStartDatetime&&(n+=" AND job_first_publish_datetime >= '"+m()(o.firstPublishStartDatetime).format("YYYY-MM-DD HH:mm:ss")+"'"),o.firstPublishEndDatetime&&(n+=" AND job_first_publish_datetime < '"+m()(o.firstPublishEndDatetime).format("YYYY-MM-DD HH:mm:ss")+"'"),n.startsWith(" AND")&&(n=n.replace("AND",""),n=" WHERE "+n),a+=n,a+=r,a+=i;let b=[],_=0,l=[];g.exec({sql:a,rowMode:"object",resultRows:l});for(let e=0;e<l.length;e++){let o=l[e],t=new c,a=Object.keys(o);for(let e=0;e<a.length;e++){let s=a[e];t[s]=o[s]}b.push(o)}s+=n;let j=[];g.exec({sql:s,rowMode:"object",resultRows:j}),_=j[0].total,t.items=b,t.total=_,N(e,t)}catch(o){A(e,"[worker] searchJob error : "+o.message)}},statisticJobBrowse:function(e,o){try{let o=new f,t=m()(),a=t.startOf("day").format("YYYY-MM-DD HH:mm:ss"),s=t.startOf("day").add(1,"day").format("YYYY-MM-DD HH:mm:ss");const n="SELECT COUNT(*) AS count FROM job_browse_history WHERE job_visit_datetime >= $startDatetime AND job_visit_datetime < $endDatetime";let r=[];g.exec({sql:n,rowMode:"object",resultRows:r,bind:{$startDatetime:a,$endDatetime:s}});const i="SELECT COUNT(*) AS count FROM job_browse_history";let b=[];g.exec({sql:i,rowMode:"object",resultRows:b});const _="SELECT COUNT(*) AS count FROM job;";let l=[];g.exec({sql:_,rowMode:"object",resultRows:l}),o.todayBrowseCount=r[0].count,o.totalBrowseCount=b[0].count,o.totalJob=l[0].count,N(e,o)}catch(o){A(e,"[worker] statisticJobBrowse error : "+o.message)}}},T=new Map;let S=Object.keys(D);for(let e=0;e<S.length;e++){let o=S[e];T.set(o,D[o])}function w(e,o){let t=[];if(g.exec({sql:"SELECT job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,job_first_publish_datetime,boss_name,boss_company_name,boss_position,create_datetime,update_datetime FROM job WHERE job_id = ?",rowMode:"object",bind:[e.jobId],resultRows:t}),t.length>0);else{const t="\n  INSERT INTO job (job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,job_first_publish_datetime,boss_name,boss_company_name,boss_position,create_datetime,update_datetime) VALUES ($job_id,$job_platform,$job_url,$job_name,$job_company_name,$job_location_name,$job_address,$job_longitude,$job_latitude,$job_description,$job_degree_name,$job_year,$job_salary_min,$job_salary_max,$job_salary_total_month,$job_first_publish_datetime,$boss_name,$boss_company_name,$boss_position,$create_datetime,$update_datetime)\n";g.exec({sql:t,bind:{$job_id:e.jobId,$job_platform:e.jobPlatform,$job_url:e.jobUrl,$job_name:e.jobName,$job_company_name:e.jobCompanyName,$job_location_name:e.jobLocationName,$job_address:e.jobAddress,$job_longitude:e.jobLongitude,$job_latitude:e.jobLatitude,$job_description:e.jobDescription,$job_degree_name:e.jobDegreeName,$job_year:e.jobYear,$job_salary_min:e.jobSalaryMin,$job_salary_max:e.jobSalaryMax,$job_salary_total_month:e.jobSalaryTotalMonth,$job_first_publish_datetime:m()(e.jobFirstPublishDatetime).isValid()?m()(e.jobFirstPublishDatetime).format("YYYY-MM-DD HH:mm:ss"):null,$boss_name:e.bossName,$boss_company_name:e.bossCompanyName,$boss_position:e.bossPosition,$create_datetime:m()(o).format("YYYY-MM-DD HH:mm:ss"),$update_datetime:m()(o).format("YYYY-MM-DD HH:mm:ss")}})}g.exec({sql:"\nINSERT INTO job_browse_history (job_id,job_visit_datetime,job_visit_type) VALUES ($job_id,$job_visit_datetime,$job_visit_type)\n",bind:{$job_id:e.jobId,$job_visit_datetime:m()(o).format("YYYY-MM-DD HH:mm:ss"),$job_visit_type:"SEARCH"}})}const M=function(e){const o=e.capi,t=e.oo1;b("SQLite3 version",o.sqlite3_libversion(),o.sqlite3_sourceid()),"OpfsDb"in t?(g=new t.OpfsDb("/job.sqlite3"),b("[DB] The OPFS is available."),b("[DB] Persisted db =",g.filename)):(g=new t.DB("/job.sqlite3","ct"),b("[DB] The OPFS is not available."),b("[DB] transient db =",g.filename)),i("[DB] schema checking...");let a=p,s=0,n=a.length;try{const e="SELECT COUNT(*) AS count FROM sqlite_schema;";let o=0,t=[];if(g.exec({sql:e,rowMode:"object",resultRows:t}),t.length>0&&(o=t[0].count),i("[DB] current schemaCount = "+o),0==o){const e="PRAGMA auto_vacuum = 1";g.exec(e),i("[DB] execute "+e)}}catch(e){return void console.error("[DB] checking schema fail,"+e.message)}try{g.exec({sql:"BEGIN TRANSACTION"});const e="\n    CREATE TABLE IF NOT EXISTS version(\n      num INTEGER\n    )\n  ";g.exec(e);const o="SELECT num FROM version";let t=[];if(g.exec({sql:o,rowMode:"object",resultRows:t}),t.length>0)s=t[0].num;else{const e="INSERT INTO version(num) values($num)";g.exec({sql:e,bind:{$num:0}})}if(i("[DB] schema oldVersion = "+s+", newVersion = "+n),n>s){i("[DB] schema upgrade start");for(let e=s;e<n;e++){let o=e+1,t=a[e].getSqlList();i("[DB] schema upgrade changelog version = "+o+", sql total = "+t.length);for(let e=0;e<t.length;e++){i("[DB] schema upgrade changelog version = "+o+", execute sql = "+(e+1)+"/"+t.length);let a=t[e];g.exec(a)}}const e="UPDATE version SET num = $num";g.exec({sql:e,bind:{$num:n}}),i("[DB] schema upgrade finish to version = "+n),i("[DB] current schema version = "+n)}else i("[DB] skip schema upgrade"),i("[DB] current schema version = "+s);g.exec({sql:"COMMIT"})}catch(e){console.error("[DB] schema upgrade fail,"+e.message),g.exec({sql:"ROLLBACK TRANSACTION"})}};function N(e,o){let t=JSON.parse(JSON.stringify(e));t.data=o,postMessage({type:"db",data:t}),b("[worker][send][worker -> offscreen] message = "+JSON.stringify(t))}function A(e,o){i(o);let t=JSON.parse(JSON.stringify(e));b(t),t.error=o,postMessage({type:"db",data:t}),b("[worker][send][worker -> offscreen] message = "+JSON.stringify(t))}onmessage=function(e){let o=e.data;b("[worker][receive][offscreen -> worker] message = "+JSON.stringify(o));let t=o.action;b("[worker] invoke action = "+t),T.get(t)(o,o.param)}}},a={};function s(e){var o=a[e];if(void 0!==o)return o.exports;var n=a[e]={exports:{}};return t[e].call(n.exports,n,n.exports,s),n.exports}s.m=t,s.x=()=>{var e=s.O(void 0,[372],(()=>s(7145)));return s.O(e)},e=[],s.O=(o,t,a,n)=>{if(!t){var r=1/0;for(l=0;l<e.length;l++){for(var[t,a,n]=e[l],i=!0,b=0;b<t.length;b++)(!1&n||r>=n)&&Object.keys(s.O).every((e=>s.O[e](t[b])))?t.splice(b--,1):(i=!1,n<r&&(r=n));if(i){e.splice(l--,1);var _=a();void 0!==_&&(o=_)}}return o}n=n||0;for(var l=e.length;l>0&&e[l-1][2]>n;l--)e[l]=e[l-1];e[l]=[t,a,n]},s.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return s.d(o,{a:o}),o},s.d=(e,o)=>{for(var t in o)s.o(o,t)&&!s.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((o,t)=>(s.f[t](e,o),o)),[])),s.u=e=>e+".js",s.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),s.p="./",(()=>{s.b=self.location+"";var e={145:1};s.f.i=(o,t)=>{e[o]||importScripts(s.p+s.u(o))};var o=self.webpackChunkboss_show_time=self.webpackChunkboss_show_time||[],t=o.push.bind(o);o.push=o=>{var[a,n,r]=o;for(var i in n)s.o(n,i)&&(s.m[i]=n[i]);for(r&&r(s);a.length;)e[a.pop()]=1;t(o)}})(),o=s.x,s.x=()=>s.e(372).then(o),s.x()})();
//# sourceMappingURL=145.js.map