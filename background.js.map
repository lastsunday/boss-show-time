{"version":3,"file":"background.js","mappings":"mBAIA,IAAIA,GACJC,eAAsCC,GAoBpC,IAAIC,QAjBMC,OAAOC,UAAUC,mBAGvBN,QACIA,GAENA,EAAWI,OAAOC,UAAUE,eAAe,CACzCC,IAAKJ,OAAOK,QAAQC,OAwCH,kBAvCjBC,QAAS,CACPP,OAAOC,UAAUO,OAAOC,SAAWT,OAAOC,UAAUO,OAAOE,OAE7DC,cAAe,0CAEXf,EACNA,EAAW,MAIbI,OAAOK,QAAQO,UAAUC,aAAY,SAASC,GAC5Cf,EAAee,EACfA,EAAKC,UAAUF,aAAY,SAASG,GAkBtC,IAAqCC,EAjByCC,KAAKC,UAAUH,GAiBxDC,EAhBDD,EAiBlChB,OAAOK,QAAQe,YAAY,CACzBC,KAlBuB,SAmBvBC,OAAQ,YACRL,SAnBkEC,KAAKC,UAAUH,EACnF,GACF,IAEAhB,OAAOK,QAAQU,UAAUF,aAAaU,IACpC,IAAIP,EAAUO,EAAMN,KACiDC,KAAKC,UAAUH,GAKtF,SAAoCA,GAClCjB,EAAayB,YAAYR,EAC3B,CANES,CAA2BT,GAC4CE,KAAKC,UAAUH,EAAS,IAcnG,CAEAU,E","sources":["webpack://boss-show-time/./src/background.js"],"sourcesContent":["import {debugLog} from \"./log\";\n\ndebugLog('background ready');\n\nlet creating;\nasync function setupOffscreenDocument(path) {\n  // Check all windows controlled by the service worker to see if one\n  // of them is the offscreen document with the given path\n  if (await chrome.offscreen.hasDocument?.()) return;\n\n  // create offscreen document\n  if (creating) {\n    await creating;\n  } else {\n    creating = chrome.offscreen.createDocument({\n      url: chrome.runtime.getURL(path),\n      reasons: [\n        chrome.offscreen.Reason.WORKERS || chrome.offscreen.Reason.BLOBS,\n      ],\n      justification: \"To run web worker to run sqlite\",\n    });\n    await creating;\n    creating = null;\n  }\n\n  var portInstance;\n  chrome.runtime.onConnect.addListener(function(port) {\n    portInstance = port;\n    port.onMessage.addListener(function(message) {\n      debugLog(\"[background][receive][content script -> background] message = \"+JSON.stringify(message));\n      sendMessageToOffscreen(\"bridge\",message);\n      debugLog(\"[background][send][background -> offscreen] message = \"+JSON.stringify(message));\n    });\n  });\n\n  chrome.runtime.onMessage.addListener((event)=>{\n    var message = event.data;\n    debugLog(\"[background][receive][offscreen -> background] message = \"+JSON.stringify(message));\n    sendMessageToContentScript(message);\n    debugLog(\"[background][send][background -> content script] message = \"+JSON.stringify(message));\n  });\n\n  function sendMessageToContentScript(message){\n    portInstance.postMessage(message);\n  }\n\n  function sendMessageToOffscreen(type,data){\n    chrome.runtime.sendMessage({\n      type,\n      target: 'offscreen',\n      data\n    });\n  };\n}\n\nsetupOffscreenDocument(\"offscreen.html\");\n\n\n\n\n"],"names":["creating","async","path","portInstance","chrome","offscreen","hasDocument","createDocument","url","runtime","getURL","reasons","Reason","WORKERS","BLOBS","justification","onConnect","addListener","port","onMessage","message","data","JSON","stringify","sendMessage","type","target","event","postMessage","sendMessageToContentScript","setupOffscreenDocument"],"sourceRoot":""}