{"version":3,"file":"963.js","mappings":"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","sources":["webpack://boss-show-time/webpack/runtime/chunk loaded","webpack://boss-show-time/webpack/runtime/startup chunk dependencies","webpack://boss-show-time/./src/log.js","webpack://boss-show-time/./src/api/bridge.js","webpack://boss-show-time/./src/domain/job.js","webpack://boss-show-time/./src/dto/jobDTO.js","webpack://boss-show-time/./src/offscreen/changeLog/changelog.js","webpack://boss-show-time/./src/offscreen/changeLog/changeLogV1.js","webpack://boss-show-time/./src/offscreen/changeLog/index.js","webpack://boss-show-time/./src/dto/statisticJobBrowseDTO.js","webpack://boss-show-time/./src/dto/pageDTO.js","webpack://boss-show-time/./src/dto/searchJobDTO.js","webpack://boss-show-time/./src/offscreen/worker.js","webpack://boss-show-time/./src/utils.js","webpack://boss-show-time/webpack/bootstrap","webpack://boss-show-time/webpack/runtime/compat get default export","webpack://boss-show-time/webpack/runtime/define property getters","webpack://boss-show-time/webpack/runtime/ensure chunk","webpack://boss-show-time/webpack/runtime/get javascript chunk filename","webpack://boss-show-time/webpack/runtime/hasOwnProperty shorthand","webpack://boss-show-time/webpack/runtime/publicPath","webpack://boss-show-time/webpack/runtime/importScripts chunk loading","webpack://boss-show-time/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(372).then(next);\n};","const LEVEL_TRACE = 0;\nconst LEVEL_DEBUG = 1;\nconst LEVEL_INFO = 2;\nconst logLevel = LEVEL_INFO;\n\nexport function infoLog(message){\n    if(logLevel <= LEVEL_INFO){\n        console.log(message)\n    }\n}\n\nexport function debugLog(message){\n    if(logLevel == LEVEL_TRACE){\n        console.trace(message);\n    }else{\n        if(logLevel == LEVEL_DEBUG){\n            console.warn(message);\n        }\n    }\n}","import { getRandomInt } from \"../utils\";\nimport { debugLog } from \"../log\";\n\nconst callbackPromiseHookMap = new Map();\nvar seq = 0;\n\n/**\n * \n * @param {string} action 通过传入src/offscreen/worker.js里的WorkerBridge的方法名，实现方法的调用\n * @param {*} param 所需要传递的调用参数，在被调用方法的param参数中有体现\n * @returns \n */\nexport function invoke(action,param){\n    var promise = new Promise((resolve,reject)=>{\n        var callbackId = genCallbackId();\n        addCallbackPromiseHook(callbackId,{resolve,reject});\n        var message = {action,callbackId,param};\n        var portInstance = chrome.runtime.connect({name: \"bridge\"});\n        portInstance.onMessage.addListener(function(message) {\n            //message = {action,callbackId,param,data,error}\n            var promiseHook = getAndRemovePromiseHook(message.callbackId);\n            if(message.error){\n                promiseHook.reject(message);\n            }else{\n                promiseHook.resolve(message);\n            }\n            debugLog(\"[content script][receive][background -> content script] message = \"+JSON.stringify(message));\n            portInstance.disconnect();\n        });\n        portInstance.postMessage(message);\n        debugLog(\"[content script][send][content script -> background] message = \"+JSON.stringify(message));\n    });\n    return promise;\n}\n\nfunction addCallbackPromiseHook(callbackId,promiseHook){\n    callbackPromiseHookMap.set(callbackId,promiseHook);\n}\n\nfunction getAndRemovePromiseHook(callbackId){\n    var promiseHook = callbackPromiseHookMap.get(callbackId);\n    callbackPromiseHookMap.delete(callbackId);\n    return promiseHook;\n}\n\nfunction genCallbackId(){\n    return new Date().getTime()+seq+getRandomInt(1000);\n}\n\nexport class Message{\n    action;\n    callbackId;\n    param;\n    error;\n    data;\n}","export class Job{\n    jobId;\n    jobPlatform;\n    jobUrl;\n    jobName;\n    jobCompanyName;\n    jobLocationName;\n    jobAddress;\n    jobLongitude;\n    jobLatitude;\n    jobDescription;\n    jobDegreeName;\n    jobYear;\n    jobSalaryMin;\n    jobSalaryMax;\n    jobSalaryTotalMonth;\n    jobFirstPublishDatetime;\n    bossName;\n    bossCompanyName;\n    bossPosition;\n    createDatetime;\n    updateDatetime\n}","import { Job } from \"../domain/job\";\n\nexport class JobDTO extends Job{\n    browseCount;\n}","export class ChangeLog{\n\n    /**\n     * @returns {string[]}\n     */\n    getSqlList(){\n        return [];\n    }\n\n}\n","import { ChangeLog } from './changelog';\nconst SQL_CREATE_TABLE_JOB = `\n  CREATE TABLE job(\n    job_id TEXT PRIMARY KEY,\n    job_platform TEXT,\n    job_url TEXT, \n    job_name TEXT,\n    job_company_name TEXT,\n    job_location_name TEXT,\n    job_address TEXT,\n    job_longitude NUMERIC,\n    job_latitude NUMERIC,\n    job_description TEXT,\n    job_degree_name TEXT,\n    job_year NUMERIC,\n    job_salary_min NUMERIC,\n    job_salary_max NUMERIC,\n    job_salary_total_month NUMERIC,\n    job_first_publish_datetime DATETIME,\n    boss_name TEXT,\n    boss_company_name  TEXT,\n    boss_position TEXT,\n    create_datetime DATETIME,\n    update_datetime DATETIME\n  )\n  `;\n\n//data_source空间占用为每条岗位基础数据的1.5倍，决定不保留\n// const SQL_CREATE_TABLE_JOB_DATA_SOURCE = `\n//   CREATE TABLE job_data_source(\n//     job_id TEXT PRIMARY KEY,\n//     data_source TEXT\n//   )\n// `;\n\nconst SQL_CREATE_TABLE_JOB_BROWSE_HISTORY = `\n  CREATE TABLE job_browse_history(\n    job_id TEXT,\n    job_visit_datetime DATETIME,\n    job_visit_type TEXT\n  )\n  `;\nexport class ChangeLogV1 extends ChangeLog {\n  getSqlList() {\n    let sqlList = [SQL_CREATE_TABLE_JOB, SQL_CREATE_TABLE_JOB_BROWSE_HISTORY];\n    return sqlList;\n  }\n}\n","import { ChangeLog } from \"./changelog\";\n\nvar changelogListInstance = [];\n\n/**\n * \n * @param {ChangeLog[]} changelogList \n */\nexport function initChangeLog(changelogList){\n    changelogListInstance = changelogList;\n}\n\nexport function getChangeLogList(){\n    return changelogListInstance;\n}","export class StatisticJobBrowseDTO{\n    todayBrowseCount;\n    totalBrowseCount;\n    totalJob;\n}","export class PageDTO{\n    items;\n    total;\n}","import { PageDTO } from \"./pageDTO\";\n\nexport class SearchJobDTO extends PageDTO{\n    \n}","import { infoLog, debugLog } from '../log';\nimport sqlite3InitModule from '@sqlite.org/sqlite-wasm';\nimport { Job } from '../domain/job';\nimport { Message } from '../api/bridge';\nimport dayjs from 'dayjs';\nimport { JobDTO } from '../dto/jobDTO';\nimport { toHump } from '../utils';\nimport { ChangeLogV1 } from './changeLog/changeLogV1';\nimport { initChangeLog, getChangeLogList } from './changeLog';\nimport { StatisticJobBrowseDTO } from '../dto/statisticJobBrowseDTO';\nimport { SearchJobBO } from '@/bo/pageBO';\nimport { SearchJobDTO } from '../dto/searchJobDTO';\ndebugLog('worker ready');\n\nlet db;\nlet initializing = false;\n\nexport const WorkerBridge = {\n  /**\n   *\n   * @param {*} message\n   * @param {*} param\n   */\n  init: function (message, param) {\n    debugLog('Loading and initializing sqlite3 module...');\n    let changelogList = [];\n    changelogList.push(new ChangeLogV1());\n    initChangeLog(changelogList);\n    sqlite3InitModule({\n      print: debugLog,\n      printErr: infoLog,\n    }).then(function (sqlite3) {\n      debugLog('Done initializing. Running app...');\n      if (!initializing) {\n        try {\n          initDb(sqlite3);\n          initializing = true;\n          postSuccessMessage(message);\n        } catch (e) {\n          postErrorMessage(message, 'init sqlite3 error : ' + e.message);\n        }\n      } else {\n        postSuccessMessage(message);\n      }\n    });\n  },\n  ping: function (message, param) {\n    postSuccessMessage(message, 'pong');\n  },\n\n  /**\n   *\n   * @param {Message} message\n   * @param {Job[]} param\n   */\n  batchAddOrUpdateJobBrowse: function (message, param) {\n    try {\n      const now = new Date();\n      db.exec({\n        sql: 'BEGIN TRANSACTION',\n      });\n      for (let i = 0; i < param.length; i++) {\n        insertJobAndBrowseHistory(param[i], now);\n      }\n      db.exec({\n        sql: 'COMMIT',\n      });\n      postSuccessMessage(message, {});\n    } catch (e) {\n      postErrorMessage(\n        message,\n        '[worker] addOrUpdateJobBrowse error : ' + e.message\n      );\n    }\n  },\n\n  /**\n   *\n   * @param {Message} message\n   * @param {Job} param\n   */\n  addOrUpdateJobBrowse: function (message, param) {\n    try {\n      const now = new Date();\n      db.exec({\n        sql: 'BEGIN TRANSACTION',\n      });\n      insertJobAndBrowseHistory(param, now);\n      db.exec({\n        sql: 'COMMIT',\n      });\n      postSuccessMessage(message, {});\n    } catch (e) {\n      postErrorMessage(\n        message,\n        '[worker] addOrUpdateJobBrowse error : ' + e.message\n      );\n    }\n  },\n\n  /**\n   *\n   * @param {*} message\n   * @param {string[]} param\n   *\n   * @returns JobDTO[]\n   */\n  getJobBrowseInfoByIds: function (message, param) {\n    try {\n      let countMap = new Map();\n      let ids = \"'\" + param.join(\"','\") + \"'\";\n      const SQL_QUERY_JOB_BOWSE_HISTORY_GROUP_COUNT =\n        'SELECT job_id AS jobId ,count(*) AS total FROM job_browse_history WHERE job_id IN (' +\n        ids +\n        ') GROUP BY job_id;';\n      let countRows = [];\n      db.exec({\n        sql: SQL_QUERY_JOB_BOWSE_HISTORY_GROUP_COUNT,\n        rowMode: 'object',\n        resultRows: countRows,\n      });\n      for (let i = 0; i < countRows.length; i++) {\n        let item = countRows[i];\n        countMap.set(item.jobId, item.total);\n      }\n      let tempResultMap = new Map();\n      const SQL_QUERY_JOB =\n        'SELECT job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,boss_name,boss_company_name,boss_position,create_datetime,update_datetime FROM job WHERE job_id in (' +\n        ids +\n        ')';\n      let rows = [];\n      db.exec({\n        sql: SQL_QUERY_JOB,\n        rowMode: 'object',\n        resultRows: rows,\n      });\n      for (let i = 0; i < rows.length; i++) {\n        let item = rows[i];\n        let resultItem = new JobDTO();\n        let keys = Object.keys(item);\n        for (let n = 0; n < keys.length; n++) {\n          let key = keys[n];\n          resultItem[toHump(key)] = item[key];\n        }\n        tempResultMap.set(resultItem.jobId, resultItem);\n      }\n      let result = [];\n      for (let j = 0; j < param.length; j++) {\n        let jobId = param[j];\n        let target = tempResultMap.get(jobId);\n        if (target) {\n          target.browseCount = countMap.get(jobId);\n        }\n        result.push(target);\n      }\n      postSuccessMessage(message, result);\n    } catch (e) {\n      postErrorMessage(\n        message,\n        '[worker] getJobBrowseInfoByIds error : ' + e.message\n      );\n    }\n  },\n\n  /**\n   *\n   * @param {Message} message\n   * @param {SearchJobBO} param\n   *\n   * @returns SearchJobDTO\n   */\n  searchJob: function (message, param) {\n    try {\n      let result = new SearchJobDTO();\n      let sqlQuery =\n        'SELECT job_id AS jobId,job_platform AS jobPlatform,job_url AS jobUrl,job_name AS jobName,job_company_name AS jobCompanyName,job_location_name AS jobLocationName,job_address AS jobAddress,job_longitude AS jobLongitude,job_latitude AS jobLatitude,job_description AS jobDescription,job_degree_name AS jobDegreeName,job_year AS jobYear,job_salary_min AS jobSalaryMin,job_salary_max AS jobSalaryMax,job_salary_total_month AS jobSalaryTotalMonth,job_first_publish_datetime AS jobFirstPublishDatetime,boss_name AS bossName,boss_company_name AS bossCompanyName,boss_position AS bossPosition,create_datetime AS createDatetime,update_datetime AS updateDatetime FROM job';\n      let sqlCount = 'SELECT COUNT(*) AS total from job';\n      let whereCondition = '';\n      let orderBy = ' ORDER BY create_datetime DESC';\n      let limitStart = (param.pageNum - 1) * param.pageSize;\n      let limitEnd = param.pageSize;\n      let limit = ' limit ' + limitStart + ',' + limitEnd;\n\n      if (param.jobName) {\n        whereCondition += \" AND job_name LIKE '%\" + param.jobName + \"%' \";\n      }\n      if (param.jobCompanyName) {\n        whereCondition +=\n          \" AND job_company_name LIKE '%\" + param.jobCompanyName + \"%' \";\n      }\n      if (param.startDatetime) {\n        whereCondition +=\n          \" AND create_datetime >= '\" +\n          dayjs(param.startDatetime).format('YYYY-MM-DD HH:mm:ss')+\"'\";\n      }\n      if (param.endDatetime) {\n        whereCondition +=\n          \" AND create_datetime < '\" +\n          dayjs(param.endDatetime).format('YYYY-MM-DD HH:mm:ss')+\"'\";\n      }\n      if (param.firstPublishStartDatetime) {\n        whereCondition +=\n          \" AND job_first_publish_datetime >= '\" +\n          dayjs(param.firstPublishStartDatetime).format('YYYY-MM-DD HH:mm:ss')+\"'\";\n      }\n      if (param.firstPublishEndDatetime) {\n        whereCondition +=\n          \" AND job_first_publish_datetime < '\" +\n          dayjs(param.firstPublishEndDatetime).format('YYYY-MM-DD HH:mm:ss')+\"'\";\n      }\n      if (whereCondition.startsWith(' AND')) {\n        whereCondition = whereCondition.replace('AND', '');\n        whereCondition = ' WHERE ' + whereCondition;\n      }\n      sqlQuery += whereCondition;\n      sqlQuery += orderBy;\n      sqlQuery += limit;\n      let items = [];\n      let total = 0;\n      let queryRows = [];\n      db.exec({\n        sql: sqlQuery,\n        rowMode: 'object',\n        resultRows: queryRows,\n      });\n\n      for (let i = 0; i < queryRows.length; i++) {\n        let item = queryRows[i];\n        let resultItem = new JobDTO();\n        let keys = Object.keys(item);\n        for (let n = 0; n < keys.length; n++) {\n          let key = keys[n];\n          resultItem[key] = item[key];\n        }\n        items.push(item);\n      }\n\n      //count\n      sqlCount += whereCondition;\n      let queryCountRows = [];\n      db.exec({\n        sql: sqlCount,\n        rowMode: 'object',\n        resultRows: queryCountRows,\n      });\n      total = queryCountRows[0].total;\n\n      result.items = items;\n      result.total = total;\n      postSuccessMessage(message, result);\n    } catch (e) {\n      postErrorMessage(message, '[worker] searchJob error : ' + e.message);\n    }\n  },\n\n  /**\n   *\n   * @param {Message} message\n   * @param {*} param\n   *\n   * @returns {StatisticJobBrowseDTO}\n   */\n  statisticJobBrowse: function (message, param) {\n    try {\n      let result = new StatisticJobBrowseDTO();\n      let now = dayjs();\n      let todayStart = now.startOf('day').format('YYYY-MM-DD HH:mm:ss');\n      let todayEnd = now.startOf('day').add(1,'day').format('YYYY-MM-DD HH:mm:ss');\n      const SQL_QUERY_JOB_BOWSE_HISTORY_COUNT_TODAY =\n        'SELECT COUNT(*) AS count FROM job_browse_history WHERE job_visit_datetime >= $startDatetime AND job_visit_datetime < $endDatetime';\n      let browseCountToday = [];\n      db.exec({\n        sql: SQL_QUERY_JOB_BOWSE_HISTORY_COUNT_TODAY,\n        rowMode: 'object',\n        resultRows: browseCountToday,\n        bind: {\n          $startDatetime: todayStart,\n          $endDatetime: todayEnd,\n        },\n      });\n      const SQL_QUERY_JOB_BOWSE_HISTORY_COUNT_TOTAL =\n        'SELECT COUNT(*) AS count FROM job_browse_history';\n      let browseTotalCount = [];\n      db.exec({\n        sql: SQL_QUERY_JOB_BOWSE_HISTORY_COUNT_TOTAL,\n        rowMode: 'object',\n        resultRows: browseTotalCount,\n      });\n      const SQL_QUERY_JOB_COUNT_TOTAL = 'SELECT COUNT(*) AS count FROM job;';\n      let jobTotalCount = [];\n      db.exec({\n        sql: SQL_QUERY_JOB_COUNT_TOTAL,\n        rowMode: 'object',\n        resultRows: jobTotalCount,\n      });\n      result.todayBrowseCount = browseCountToday[0].count;\n      result.totalBrowseCount = browseTotalCount[0].count;\n      result.totalJob = jobTotalCount[0].count;\n      postSuccessMessage(message, result);\n    } catch (e) {\n      postErrorMessage(\n        message,\n        '[worker] statisticJobBrowse error : ' + e.message\n      );\n    }\n  },\n};\n\nconst ACTION_FUNCTION = new Map();\nlet keys = Object.keys(WorkerBridge);\nfor (let i = 0; i < keys.length; i++) {\n  let key = keys[i];\n  ACTION_FUNCTION.set(key, WorkerBridge[key]);\n}\n\nfunction insertJobAndBrowseHistory(param, now) {\n  let rows = [];\n  const SQL_JOB_BY_ID = `SELECT job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,job_first_publish_datetime,boss_name,boss_company_name,boss_position,create_datetime,update_datetime FROM job WHERE job_id = ?`;\n  db.exec({\n    sql: SQL_JOB_BY_ID,\n    rowMode: 'object',\n    bind: [param.jobId],\n    resultRows: rows,\n  });\n  if (rows.length > 0) {\n    //skip\n  } else {\n    const SQL_INSERT_JOB = `\n  INSERT INTO job (job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,job_first_publish_datetime,boss_name,boss_company_name,boss_position,create_datetime,update_datetime) VALUES ($job_id,$job_platform,$job_url,$job_name,$job_company_name,$job_location_name,$job_address,$job_longitude,$job_latitude,$job_description,$job_degree_name,$job_year,$job_salary_min,$job_salary_max,$job_salary_total_month,$job_first_publish_datetime,$boss_name,$boss_company_name,$boss_position,$create_datetime,$update_datetime)\n`;\n    db.exec({\n      sql: SQL_INSERT_JOB,\n      bind: {\n        $job_id: param.jobId,\n        $job_platform: param.jobPlatform,\n        $job_url: param.jobUrl,\n        $job_name: param.jobName,\n        $job_company_name: param.jobCompanyName,\n        $job_location_name: param.jobLocationName,\n        $job_address: param.jobAddress,\n        $job_longitude: param.jobLongitude,\n        $job_latitude: param.jobLatitude,\n        $job_description: param.jobDescription,\n        $job_degree_name: param.jobDegreeName,\n        $job_year: param.jobYear,\n        $job_salary_min: param.jobSalaryMin,\n        $job_salary_max: param.jobSalaryMax,\n        $job_salary_total_month: param.jobSalaryTotalMonth,\n        $job_first_publish_datetime: dayjs(\n          param.jobFirstPublishDatetime\n        ).isValid()\n          ? dayjs(param.jobFirstPublishDatetime).format('YYYY-MM-DD HH:mm:ss')\n          : null,\n        $boss_name: param.bossName,\n        $boss_company_name: param.bossCompanyName,\n        $boss_position: param.bossPosition,\n        $create_datetime: dayjs(now).format('YYYY-MM-DD HH:mm:ss'),\n        $update_datetime: dayjs(now).format('YYYY-MM-DD HH:mm:ss'),\n      },\n    });\n  }\n  const SQL_INSERT_JOB_BROWSE_HISTORY = `\nINSERT INTO job_browse_history (job_id,job_visit_datetime,job_visit_type) VALUES ($job_id,$job_visit_datetime,$job_visit_type)\n`;\n  db.exec({\n    sql: SQL_INSERT_JOB_BROWSE_HISTORY,\n    bind: {\n      $job_id: param.jobId,\n      $job_visit_datetime: dayjs(now).format('YYYY-MM-DD HH:mm:ss'),\n      $job_visit_type: 'SEARCH',\n    },\n  });\n}\n\nconst initDb = function (sqlite3) {\n  const capi = sqlite3.capi; // C-style API\n  const oo = sqlite3.oo1; // High-level OO API\n  debugLog(\n    'SQLite3 version',\n    capi.sqlite3_libversion(),\n    capi.sqlite3_sourceid()\n  );\n\n  if ('OpfsDb' in oo) {\n    db = new oo.OpfsDb('/job.sqlite3');\n    debugLog('[DB] The OPFS is available.');\n    debugLog('[DB] Persisted db =', db.filename);\n  } else {\n    db = new oo.DB('/job.sqlite3', 'ct');\n    debugLog('[DB] The OPFS is not available.');\n    debugLog('[DB] transient db =', db.filename);\n  }\n  infoLog('[DB] schema checking...');\n  let changelogList = getChangeLogList();\n  let oldVersion = 0;\n  let newVersion = changelogList.length;\n  try {\n    const SQL_SELECT_SCHEMA_COUNT =\n      'SELECT COUNT(*) AS count FROM sqlite_schema;';\n    let schemaCount = 0;\n    let schemaCountRow = [];\n    db.exec({\n      sql: SQL_SELECT_SCHEMA_COUNT,\n      rowMode: 'object',\n      resultRows: schemaCountRow,\n    });\n    if (schemaCountRow.length > 0) {\n      schemaCount = schemaCountRow[0].count;\n    }\n    infoLog('[DB] current schemaCount = ' + schemaCount);\n    if (schemaCount == 0) {\n      const SQL_PRAGMA_AUTO_VACUUM = 'PRAGMA auto_vacuum = 1';\n      db.exec(SQL_PRAGMA_AUTO_VACUUM);\n      infoLog('[DB] execute ' + SQL_PRAGMA_AUTO_VACUUM);\n    }\n  } catch (e) {\n    console.error('[DB] checking schema fail,' + e.message);\n    return;\n  }\n  try {\n    db.exec({\n      sql: 'BEGIN TRANSACTION',\n    });\n    const SQL_CREATE_TABLE_VERSION = `\n    CREATE TABLE IF NOT EXISTS version(\n      num INTEGER\n    )\n  `;\n    db.exec(SQL_CREATE_TABLE_VERSION);\n    const SQL_QUERY_VERSION = 'SELECT num FROM version';\n    let rows = [];\n    db.exec({\n      sql: SQL_QUERY_VERSION,\n      rowMode: 'object',\n      resultRows: rows,\n    });\n    if (rows.length > 0) {\n      oldVersion = rows[0].num;\n    } else {\n      const SQL_INSERT_VERSION = `INSERT INTO version(num) values($num)`;\n      db.exec({\n        sql: SQL_INSERT_VERSION,\n        bind: { $num: 0 },\n      });\n    }\n    infoLog(\n      '[DB] schema oldVersion = ' + oldVersion + ', newVersion = ' + newVersion\n    );\n    if (newVersion > oldVersion) {\n      infoLog('[DB] schema upgrade start');\n      for (let i = oldVersion; i < newVersion; i++) {\n        let currentVersion = i + 1;\n        let changelog = changelogList[i];\n        let sqlList = changelog.getSqlList();\n        infoLog(\n          '[DB] schema upgrade changelog version = ' +\n            currentVersion +\n            ', sql total = ' +\n            sqlList.length\n        );\n        for (let seq = 0; seq < sqlList.length; seq++) {\n          infoLog(\n            '[DB] schema upgrade changelog version = ' +\n              currentVersion +\n              ', execute sql = ' +\n              (seq + 1) +\n              '/' +\n              sqlList.length\n          );\n          let sql = sqlList[seq];\n          db.exec(sql);\n        }\n      }\n      const SQL_UPDATE_VERSION = `UPDATE version SET num = $num`;\n      db.exec({\n        sql: SQL_UPDATE_VERSION,\n        bind: { $num: newVersion },\n      });\n      infoLog('[DB] schema upgrade finish to version = ' + newVersion);\n      infoLog('[DB] current schema version = ' + newVersion);\n    } else {\n      infoLog('[DB] skip schema upgrade');\n      infoLog('[DB] current schema version = ' + oldVersion);\n    }\n    db.exec({\n      sql: 'COMMIT',\n    });\n  } catch (e) {\n    console.error('[DB] schema upgrade fail,' + e.message);\n    db.exec({\n      sql: 'ROLLBACK TRANSACTION',\n    });\n  }\n};\n\nonmessage = function (e) {\n  let message = e.data;\n  debugLog(\n    '[worker][receive][offscreen -> worker] message = ' +\n      JSON.stringify(message)\n  );\n  let action = message.action;\n  debugLog('[worker] invoke action = ' + action);\n  ACTION_FUNCTION.get(action)(message, message.param);\n};\n\nfunction postSuccessMessage(message, data) {\n  let resultMessage = JSON.parse(JSON.stringify(message));\n  resultMessage.data = data;\n  postMessage({\n    type: 'db',\n    data: resultMessage,\n  });\n  debugLog(\n    '[worker][send][worker -> offscreen] message = ' +\n      JSON.stringify(resultMessage)\n  );\n}\n\nfunction postErrorMessage(message, error) {\n  infoLog(error);\n  let resultMessage = JSON.parse(JSON.stringify(message));\n  debugLog(resultMessage);\n  resultMessage.error = error;\n  postMessage({\n    type: 'db',\n    data: resultMessage,\n  });\n  debugLog(\n    '[worker][send][worker -> offscreen] message = ' +\n      JSON.stringify(resultMessage)\n  );\n}\n","import dayjs from \"dayjs\";\nexport function createScript(src) {\n    const script = document.createElement('script');\n    script.setAttribute('src', src);\n    return script;\n}\n\n\nexport function createLink(href) {\n    const link = document.createElement('link');\n    link.setAttribute('rel', 'stylesheet');\n    link.setAttribute('type', 'text/css');\n    \n    // 注意这里需要配置 manifest 的 web_accessible_resources 字段，否则无法加载\n    link.setAttribute('href', href);\n    link.setAttribute('crossorigin', 'anonymous');\n    return link;\n}\n \n \n// 转换时间\nexport function convertTimeToHumanReadable(dateTime) {\n    let date = dayjs(dateTime);\n    let curDate = dayjs();\n\t\n\t// 计算时间差共有多少个分钟\n\tlet minC = curDate.diff(date, 'minute', true);\n\t// 计算时间差共有多少个小时\n\tlet hourC = curDate.diff(date, 'hour', true);\n\t// 计算时间差共有多少个天\n\tlet dayC = curDate.diff(date, 'day', true);\n\t// 计算时间差共有多少个周\n\tlet weekC = curDate.diff(date, 'week', true);\n\t// 计算时间差共有多少个月\n\tlet monthC = curDate.diff(date, 'month', true);\n \n    if(minC < 5) {\n        return `刚刚`;\n    } else if (minC < 60) {\n        return `1小时内`;\n    } else if (hourC < 24) {\n        return `1天内`;\n    } else if (dayC < 7) {\n        return `${parseInt(dayC)}天内`\n    } else if (monthC < 1) {\n        return `${parseInt(Math.ceil(weekC))}周内`\n    } else if (monthC <= 2) {\n        return `2个月内`\n    } else if (monthC <= 3) {\n        return `3个月内`\n    } else {\n        return '超出3个月';\n    }\n\n}\n\nexport function convertTimeOffsetToHumanReadable(dateTime) {\n    let date = dayjs(dateTime);\n    let curDate = dayjs();\n\t\n\t// 计算时间差共有多少个分钟\n\tlet minC = curDate.diff(date, 'minute', true);\n\t// 计算时间差共有多少个小时\n\tlet hourC = curDate.diff(date, 'hour', true);\n\t// 计算时间差共有多少个天\n\tlet dayC = curDate.diff(date, 'day', true);\n\t// 计算时间差共有多少个月\n\tlet monthC = curDate.diff(date, 'month', true);\n    \n    if(minC < 1){\n        return `刚刚`;\n    }else if (minC < 60) {\n        return `${parseInt(minC)}分钟前`;\n    } else if (hourC < 24) {\n        return `${parseInt(hourC)}小时前`;\n    } else if (monthC < 1) {\n        return `${parseInt(dayC)}天前`\n    } else {\n        return `${parseInt(monthC)}月前`\n    }\n\n}\n\nexport function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\n \nexport function debounce(fn, delay) {\n    let timer = null;\n    return function(...args) {\n        if(timer) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout(() => {\n            fn(...args);\n        }, delay);\n    }\n}\n\n// 下划线转换驼峰\nexport function toHump(name) {\n    return name.replace(/\\_(\\w)/g, function(all, letter){\n        return letter.toUpperCase();\n    });\n}\n// 驼峰转换下划线\nexport function toLine(name) {\n  return name.replace(/([A-Z])/g,\"_$1\").toLowerCase();\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [372], () => (__webpack_require__(963)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"./\";","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t963: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkboss_show_time\"] = self[\"webpackChunkboss_show_time\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","LEVEL_TRACE","LEVEL_DEBUG","LEVEL_INFO","logLevel","infoLog","message","console","log","trace","warn","Map","Job","jobId","jobPlatform","jobUrl","jobName","jobCompanyName","jobLocationName","jobAddress","jobLongitude","jobLatitude","jobDescription","jobDegreeName","jobYear","jobSalaryMin","jobSalaryMax","jobSalaryTotalMonth","jobFirstPublishDatetime","bossName","bossCompanyName","bossPosition","createDatetime","updateDatetime","JobDTO","browseCount","ChangeLog","getSqlList","ChangeLogV1","changelogListInstance","StatisticJobBrowseDTO","todayBrowseCount","totalBrowseCount","totalJob","PageDTO","items","total","SearchJobDTO","db","initializing","WorkerBridge","init","param","changelogList","push","initChangeLog","print","printErr","then","sqlite3","postSuccessMessage","initDb","e","postErrorMessage","ping","batchAddOrUpdateJobBrowse","now","Date","exec","sql","i","length","insertJobAndBrowseHistory","addOrUpdateJobBrowse","getJobBrowseInfoByIds","countMap","ids","join","SQL_QUERY_JOB_BOWSE_HISTORY_GROUP_COUNT","countRows","rowMode","resultRows","item","set","tempResultMap","SQL_QUERY_JOB","rows","resultItem","keys","Object","n","key","name","replace","all","letter","toUpperCase","result","j","target","get","searchJob","sqlQuery","sqlCount","whereCondition","orderBy","limit","pageNum","pageSize","startDatetime","format","endDatetime","firstPublishStartDatetime","firstPublishEndDatetime","startsWith","queryRows","queryCountRows","statisticJobBrowse","todayStart","startOf","todayEnd","add","SQL_QUERY_JOB_BOWSE_HISTORY_COUNT_TODAY","browseCountToday","bind","$startDatetime","$endDatetime","SQL_QUERY_JOB_BOWSE_HISTORY_COUNT_TOTAL","browseTotalCount","SQL_QUERY_JOB_COUNT_TOTAL","jobTotalCount","count","ACTION_FUNCTION","SQL_INSERT_JOB","$job_id","$job_platform","$job_url","$job_name","$job_company_name","$job_location_name","$job_address","$job_longitude","$job_latitude","$job_description","$job_degree_name","$job_year","$job_salary_min","$job_salary_max","$job_salary_total_month","$job_first_publish_datetime","isValid","$boss_name","$boss_company_name","$boss_position","$create_datetime","$update_datetime","$job_visit_datetime","$job_visit_type","capi","oo","oo1","sqlite3_libversion","sqlite3_sourceid","OpfsDb","filename","DB","oldVersion","newVersion","SQL_SELECT_SCHEMA_COUNT","schemaCount","schemaCountRow","SQL_PRAGMA_AUTO_VACUUM","error","SQL_CREATE_TABLE_VERSION","SQL_QUERY_VERSION","num","SQL_INSERT_VERSION","$num","currentVersion","sqlList","seq","SQL_UPDATE_VERSION","data","resultMessage","JSON","parse","stringify","postMessage","type","onmessage","action","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","splice","r","getter","__esModule","d","a","definition","o","defineProperty","enumerable","f","chunkId","Promise","reduce","promises","u","obj","prop","prototype","hasOwnProperty","p","b","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","moreModules","runtime","pop"],"sourceRoot":""}