{"version":3,"file":"277.js","mappings":"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","sources":["webpack://boss-show-time/webpack/runtime/chunk loaded","webpack://boss-show-time/webpack/runtime/startup chunk dependencies","webpack://boss-show-time/./src/log.js","webpack://boss-show-time/./src/api/bridge.js","webpack://boss-show-time/./src/domain/job.js","webpack://boss-show-time/./src/dto/jobDTO.js","webpack://boss-show-time/./src/offscreen/changeLog/changelog.js","webpack://boss-show-time/./src/offscreen/changeLog/changeLogV1.js","webpack://boss-show-time/./src/offscreen/changeLog/index.js","webpack://boss-show-time/./src/offscreen/worker.js","webpack://boss-show-time/./src/utils.js","webpack://boss-show-time/webpack/bootstrap","webpack://boss-show-time/webpack/runtime/compat get default export","webpack://boss-show-time/webpack/runtime/define property getters","webpack://boss-show-time/webpack/runtime/ensure chunk","webpack://boss-show-time/webpack/runtime/get javascript chunk filename","webpack://boss-show-time/webpack/runtime/hasOwnProperty shorthand","webpack://boss-show-time/webpack/runtime/publicPath","webpack://boss-show-time/webpack/runtime/importScripts chunk loading","webpack://boss-show-time/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(372).then(next);\n};","const LEVEL_TRACE = 0;\nconst LEVEL_DEBUG = 1;\nconst LEVEL_INFO = 2;\nconst logLevel = LEVEL_INFO;\n\nexport function infoLog(message){\n    if(logLevel <= LEVEL_INFO){\n        console.log(message)\n    }\n}\n\nexport function debugLog(message){\n    if(logLevel == LEVEL_TRACE){\n        console.trace(message);\n    }else{\n        if(logLevel == LEVEL_DEBUG){\n            console.warn(message);\n        }\n    }\n}","import { getRandomInt } from \"../utils\";\nimport { debugLog } from \"../log\";\n\nconst callbackPromiseHookMap = new Map();\nvar seq = 0;\n\nexport function invoke(action,param){\n    var promise = new Promise((resolve,reject)=>{\n        var callbackId = genCallbackId();\n        addCallbackPromiseHook(callbackId,{resolve,reject});\n        var message = {action,callbackId,param};\n        var portInstance = chrome.runtime.connect({name: \"bridge\"});\n        portInstance.onMessage.addListener(function(message) {\n            //message = {action,callbackId,param,data,error}\n            var promiseHook = getAndRemovePromiseHook(message.callbackId);\n            if(message.error){\n                promiseHook.reject(message);\n            }else{\n                promiseHook.resolve(message);\n            }\n            debugLog(\"[content script][receive][background -> content script] message = \"+JSON.stringify(message));\n            portInstance.disconnect();\n        });\n        portInstance.postMessage(message);\n        debugLog(\"[content script][send][content script -> background] message = \"+JSON.stringify(message));\n    });\n    return promise;\n}\n\nfunction addCallbackPromiseHook(callbackId,promiseHook){\n    callbackPromiseHookMap.set(callbackId,promiseHook);\n}\n\nfunction getAndRemovePromiseHook(callbackId){\n    var promiseHook = callbackPromiseHookMap.get(callbackId);\n    callbackPromiseHookMap.delete(callbackId);\n    return promiseHook;\n}\n\nfunction genCallbackId(){\n    return new Date().getTime()+seq+getRandomInt(1000);\n}\n\nexport class Message{\n    action;\n    callbackId;\n    param;\n    error;\n    data;\n}","export class Job{\n    jobId;\n    jobPlatform;\n    jobUrl;\n    jobName;\n    jobCompanyName;\n    jobLocationName;\n    jobAddress;\n    jobLongitude;\n    jobLatitude;\n    jobDescription;\n    jobDegreeName;\n    jobYear;\n    jobSalaryMin;\n    jobSalaryMax;\n    jobSalaryTotalMonth;\n    bossName;\n    bossCompanyName;\n    bossPosition;\n    dataSource;\n    createDatetime;\n    updateDatetime\n}","import { Job } from \"../domain/job\";\n\nexport class JobDTO extends Job{\n    browseCount;\n}","export class ChangeLog{\n\n    /**\n     * @returns {string[]}\n     */\n    getSqlList(){\n        return [];\n    }\n\n}\n","import { ChangeLog } from './changelog';\nconst SQL_CREATE_TABLE_JOB = `\n  CREATE TABLE job(\n    job_id TEXT PRIMARY KEY,\n    job_platform TEXT,\n    job_url TEXT, \n    job_name TEXT,\n    job_company_name TEXT,\n    job_location_name TEXT,\n    job_address TEXT,\n    job_longitude NUMERIC,\n    job_latitude NUMERIC,\n    job_description TEXT,\n    job_degree_name TEXT,\n    job_year TEXT,\n    job_salary_min TEXT,\n    job_salary_max TEXT,\n    job_salary_total_month TEXT,\n    boss_name TEXT,\n    boss_company_name  TEXT,\n    boss_position TEXT,\n    data_source TEXT,\n    create_datetime DATETIME,\n    update_datetime DATETIME\n  )\n  `;\n\nconst SQL_CREATE_TABLE_JOB_BROWSE_HISTORY = `\n  CREATE TABLE job_browse_history(\n    job_id TEXT,\n    job_visit_datetime DATETIME,\n    job_visit_type TEXT\n  )\n  `;\nexport class ChangeLogV1 extends ChangeLog {\n  getSqlList() {\n    let sqlList = [SQL_CREATE_TABLE_JOB, SQL_CREATE_TABLE_JOB_BROWSE_HISTORY];\n    return sqlList;\n  }\n}\n","import { ChangeLog } from \"./changelog\";\n\nvar changelogListInstance = [];\n\n/**\n * \n * @param {ChangeLog[]} changelogList \n */\nexport function initChangeLog(changelogList){\n    changelogListInstance = changelogList;\n}\n\nexport function getChangeLogList(){\n    return changelogListInstance;\n}","import { infoLog, debugLog } from '../log';\nimport sqlite3InitModule from '@sqlite.org/sqlite-wasm';\nimport { Job } from '../domain/job';\nimport { Message } from '../api/bridge';\nimport dayjs from 'dayjs';\nimport { JobDTO } from '../dto/jobDTO';\nimport { toHump } from '../utils';\nimport { ChangeLogV1 } from './changeLog/changeLogV1';\nimport { initChangeLog, getChangeLogList } from './changeLog';\ndebugLog('worker ready');\n\nvar db;\n\nexport const WorkerBridge = {\n  /**\n   *\n   * @param {*} message\n   * @param {*} param\n   */\n  init: function (message, param) {\n    debugLog('Loading and initializing sqlite3 module...');\n    let changelogList = [];\n    changelogList.push(new ChangeLogV1());\n    initChangeLog(changelogList);\n    sqlite3InitModule({\n      print: debugLog,\n      printErr: infoLog,\n    }).then(function (sqlite3) {\n      debugLog('Done initializing. Running app...');\n      try {\n        initDb(sqlite3);\n        postSuccessMessage(message);\n      } catch (e) {\n        postErrorMessage(message, 'init sqlite3 error : ' + e.message);\n      }\n    });\n  },\n  ping: function (message, param) {\n    postSuccessMessage(message, 'pong');\n  },\n  /**\n   *\n   * @param {Message} message\n   * @param {Job} param\n   */\n  addOrUpdateJobBrowse: function (message, param) {\n    try {\n      const now = new Date();\n      const SQL_JOB_BY_ID = `SELECT job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,boss_name,boss_company_name,boss_position,data_source,create_datetime,update_datetime FROM job WHERE job_id = ?`;\n      var rows = [];\n      db.exec({\n        sql: 'BEGIN TRANSACTION',\n      });\n      db.exec({\n        sql: SQL_JOB_BY_ID,\n        rowMode: 'object', // 'array' (default), 'object', or 'stmt'\n        bind: [param.jobId],\n        resultRows: rows,\n      });\n      if (rows.length > 0) {\n        //skip\n      } else {\n        const SQL_INSERT_JOB = `\n      INSERT INTO job (job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,boss_name,boss_company_name,boss_position,data_source,create_datetime,update_datetime) VALUES ($job_id,$job_platform,$job_url,$job_name,$job_company_name,$job_location_name,$job_address,$job_longitude,$job_latitude,$job_description,$job_degree_name,$job_year,$job_salary_min,$job_salary_max,$job_salary_total_month,$boss_name,$boss_company_name,$boss_position,$data_source,$create_datetime,$update_datetime)\n    `;\n        db.exec({\n          sql: SQL_INSERT_JOB,\n          bind: {\n            $job_id: param.jobId,\n            $job_platform: param.jobPlatform,\n            $job_url: param.jobUrl,\n            $job_name: param.jobName,\n            $job_company_name: param.jobCompanyName,\n            $job_location_name: param.jobLocationName,\n            $job_address: param.jobAddress,\n            $job_longitude: param.jobLongitude,\n            $job_latitude: param.jobLatitude,\n            $job_description: param.jobDescription,\n            $job_degree_name: param.jobDegreeName,\n            $job_year: param.jobYear,\n            $job_salary_min: param.jobSalaryMin,\n            $job_salary_max: param.jobSalaryMax,\n            $job_salary_total_month: param.jobSalaryTotal,\n            $boss_name: param.bossName,\n            $boss_company_name: param.bossCompanyName,\n            $boss_position: param.bossPosition,\n            $data_source: param.dataSource,\n            $create_datetime: dayjs(now).format('YYYY-MM-DD HH:mm:ss'),\n            $update_datetime: dayjs(now).format('YYYY-MM-DD HH:mm:ss'),\n          },\n        });\n      }\n      const SQL_INSERT_JOB_BROWSE_HISTORY = `\n    INSERT INTO job_browse_history (job_id,job_visit_datetime,job_visit_type) VALUES ($job_id,$job_visit_datetime,$job_visit_type)\n  `;\n      db.exec({\n        sql: SQL_INSERT_JOB_BROWSE_HISTORY,\n        bind: {\n          $job_id: param.jobId,\n          $job_visit_datetime: dayjs(now).format('YYYY-MM-DD HH:mm:ss'),\n          $job_visit_type: 'SEARCH',\n        },\n      });\n      db.exec({\n        sql: 'COMMIT',\n      });\n      postSuccessMessage(message, {});\n    } catch (e) {\n      postErrorMessage(\n        message,\n        '[worker] addOrUpdateJobBrowse error : ' + e.message\n      );\n    }\n  },\n\n  /**\n   *\n   * @param {*} message\n   * @param {string[]} param\n   *\n   * @returns JobDTO[]\n   */\n  getJobBrowseInfoByIds: function (message, param) {\n    try {\n      var countMap = new Map();\n      var ids = \"'\" + param.join(\"','\") + \"'\";\n      const SQL_QUERY_JOB_BOWSE_HISTORY_GROUP_COUNT =\n        'SELECT job_id AS jobId ,count(*) AS total FROM job_browse_history WHERE job_id IN (' +\n        ids +\n        ') GROUP BY job_id;';\n      var countRows = [];\n      db.exec({\n        sql: SQL_QUERY_JOB_BOWSE_HISTORY_GROUP_COUNT,\n        rowMode: 'object', // 'array' (default), 'object', or 'stmt'\n        resultRows: countRows,\n      });\n      for (let i = 0; i < countRows.length; i++) {\n        let item = countRows[i];\n        countMap.set(item.jobId, item.total);\n      }\n      var tempResultMap = new Map();\n      const SQL_QUERY_JOB =\n        'SELECT job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,boss_name,boss_company_name,boss_position,data_source,create_datetime,update_datetime FROM job WHERE job_id in (' +\n        ids +\n        ')';\n      var rows = [];\n      db.exec({\n        sql: SQL_QUERY_JOB,\n        rowMode: 'object', // 'array' (default), 'object', or 'stmt'\n        resultRows: rows,\n      });\n      for (var i = 0; i < rows.length; i++) {\n        var item = rows[i];\n        var resultItem = new JobDTO();\n        var keys = Object.keys(item);\n        for (let n = 0; n < keys.length; n++) {\n          var key = keys[n];\n          resultItem[toHump(key)] = item[key];\n        }\n        tempResultMap.set(resultItem.jobId, resultItem);\n      }\n      let result = [];\n      for (let j = 0; j < param.length; j++) {\n        let jobId = param[j];\n        let target = tempResultMap.get(jobId);\n        target.browseCount = countMap.get(jobId);\n        result.push(target);\n      }\n      postSuccessMessage(message, result);\n    } catch (e) {\n      postErrorMessage(\n        message,\n        '[worker] getJobBrowseInfoByIds error : ' + e.message\n      );\n    }\n  },\n};\n\nconst ACTION_FUNCTION = new Map();\nvar keys = Object.keys(WorkerBridge);\nfor (var i = 0; i < keys.length; i++) {\n  var key = keys[i];\n  ACTION_FUNCTION.set(key, WorkerBridge[key]);\n}\n\nconst initDb = function (sqlite3) {\n  const capi = sqlite3.capi; // C-style API\n  const oo = sqlite3.oo1; // High-level OO API\n  debugLog(\n    'SQLite3 version',\n    capi.sqlite3_libversion(),\n    capi.sqlite3_sourceid()\n  );\n\n  if ('OpfsDb' in oo) {\n    db = new oo.OpfsDb('/job.sqlite3');\n    debugLog('[DB] The OPFS is available.');\n    debugLog('[DB] Persisted db =', db.filename);\n  } else {\n    db = new oo.DB('/job.sqlite3', 'ct');\n    debugLog('[DB] The OPFS is not available.');\n    debugLog('[DB] transient db =', db.filename);\n  }\n  infoLog('[DB] schema checking...');\n  let changelogList = getChangeLogList();\n  let oldVersion = 0;\n  let newVersion = changelogList.length;\n  try {\n    db.exec({\n      sql: 'BEGIN TRANSACTION',\n    });\n    const SQL_CREATE_TABLE_VERSION = `\n    CREATE TABLE IF NOT EXISTS version(\n      num INTEGER\n    )\n  `;\n    db.exec(SQL_CREATE_TABLE_VERSION);\n    const SQL_QUERY_VERSION = 'SELECT num FROM version';\n    var rows = [];\n    db.exec({\n      sql: SQL_QUERY_VERSION,\n      rowMode: 'object', // 'array' (default), 'object', or 'stmt'\n      resultRows: rows,\n    });\n    if (rows.length > 0) {\n      oldVersion = rows[0].num;\n    } else {\n      const SQL_INSERT_VERSION = `INSERT INTO version(num) values($num)`;\n      db.exec({\n        sql: SQL_INSERT_VERSION,\n        bind: { $num: 0 },\n      });\n    }\n    infoLog(\n      '[DB] schema oldVersion = ' + oldVersion + ', newVersion = ' + newVersion\n    );\n    if (newVersion > oldVersion) {\n      infoLog('[DB] schema upgrade start');\n      for (let i = oldVersion; i < newVersion; i++) {\n        let currentVersion = i + 1;\n        let changelog = changelogList[i];\n        let sqlList = changelog.getSqlList();\n        infoLog(\n          '[DB] schema upgrade changelog version = ' +\n            currentVersion +\n            ', sql total = ' +\n            sqlList.length\n        );\n        for (let seq = 0; seq < sqlList.length; seq++) {\n          infoLog(\n            '[DB] schema upgrade changelog version = ' +\n              currentVersion +\n              ', execute sql = ' +\n              (seq + 1) +\n              '/' +\n              sqlList.length\n          );\n          let sql = sqlList[seq];\n          db.exec(sql);\n        }\n      }\n      const SQL_UPDATE_VERSION = `UPDATE version SET num = $num`;\n      db.exec({\n        sql: SQL_UPDATE_VERSION,\n        bind: { $num: newVersion },\n      });\n      infoLog('[DB] schema upgrade finish to version = ' + newVersion);\n      infoLog('[DB] current schema version = ' + newVersion);\n    } else {\n      infoLog('[DB] skip schema upgrade');\n      infoLog('[DB] current schema version = ' + oldVersion);\n    }\n    db.exec({\n      sql: 'COMMIT',\n    });\n  } catch (e) {\n    console.error('[DB] schema upgrade fail,' + e.message);\n    db.exec({\n      sql: 'ROLLBACK TRANSACTION',\n    });\n  }\n};\n\nonmessage = function (e) {\n  var message = e.data;\n  debugLog(\n    '[worker][receive][offscreen -> worker] message = ' +\n      JSON.stringify(message)\n  );\n  var action = message.action;\n  debugLog('[worker] invoke action = ' + action);\n  ACTION_FUNCTION.get(action)(message, message.param);\n};\n\nfunction postSuccessMessage(message, data) {\n  var resultMessage = JSON.parse(JSON.stringify(message));\n  resultMessage.data = data;\n  postMessage({\n    type: 'db',\n    data: resultMessage,\n  });\n  debugLog(\n    '[worker][send][worker -> offscreen] message = ' +\n      JSON.stringify(resultMessage)\n  );\n}\n\nfunction postErrorMessage(message, error) {\n  infoLog(error);\n  var resultMessage = JSON.parse(JSON.stringify(message));\n  debugLog(resultMessage);\n  resultMessage.error = error;\n  postMessage({\n    type: 'db',\n    data: resultMessage,\n  });\n  debugLog(\n    '[worker][send][worker -> offscreen] message = ' +\n      JSON.stringify(resultMessage)\n  );\n}\n","import dayjs from \"dayjs\";\nexport function createScript(src) {\n    const script = document.createElement('script');\n    script.setAttribute('src', src);\n    return script;\n}\n\n\nexport function createLink(href) {\n    const link = document.createElement('link');\n    link.setAttribute('rel', 'stylesheet');\n    link.setAttribute('type', 'text/css');\n    \n    // 注意这里需要配置 manifest 的 web_accessible_resources 字段，否则无法加载\n    link.setAttribute('href', href);\n    link.setAttribute('crossorigin', 'anonymous');\n    return link;\n}\n \n \n// 转换时间\nexport function convertTimeToHumanReadable(dateTime) {\n    let date = dayjs(dateTime);\n    let curDate = dayjs();\n\t\n\t// 计算时间差共有多少个分钟\n\tlet minC = curDate.diff(date, 'minute', true);\n\t// 计算时间差共有多少个小时\n\tlet hourC = curDate.diff(date, 'hour', true);\n\t// 计算时间差共有多少个天\n\tlet dayC = curDate.diff(date, 'day', true);\n\t// 计算时间差共有多少个周\n\tlet weekC = curDate.diff(date, 'week', true);\n\t// 计算时间差共有多少个月\n\tlet monthC = curDate.diff(date, 'month', true);\n \n    if(minC < 5) {\n        return `刚刚`;\n    } else if (minC < 60) {\n        return `1小时内`;\n    } else if (hourC < 24) {\n        return `1天内`;\n    } else if (dayC < 7) {\n        return `${parseInt(dayC)}天内`\n    } else if (monthC < 1) {\n        return `${parseInt(Math.ceil(weekC))}周内`\n    } else if (monthC <= 2) {\n        return `2个月内`\n    } else if (monthC <= 3) {\n        return `3个月内`\n    } else {\n        return '超出3个月';\n    }\n\n}\n\nexport function convertTimeOffsetToHumanReadable(dateTime) {\n    let date = dayjs(dateTime);\n    let curDate = dayjs();\n\t\n\t// 计算时间差共有多少个分钟\n\tlet minC = curDate.diff(date, 'minute', true);\n\t// 计算时间差共有多少个小时\n\tlet hourC = curDate.diff(date, 'hour', true);\n\t// 计算时间差共有多少个天\n\tlet dayC = curDate.diff(date, 'day', true);\n\t// 计算时间差共有多少个月\n\tlet monthC = curDate.diff(date, 'month', true);\n    \n    if(minC < 1){\n        return `刚刚`;\n    }else if (minC < 60) {\n        return `${parseInt(minC)}分钟前`;\n    } else if (hourC < 24) {\n        return `${parseInt(hourC)}小时前`;\n    } else if (monthC < 1) {\n        return `${parseInt(dayC)}天前`\n    } else {\n        return `${parseInt(monthC)}月前`\n    }\n\n}\n\nexport function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\n \nexport function debounce(fn, delay) {\n    let timer = null;\n    return function(...args) {\n        if(timer) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout(() => {\n            fn(...args);\n        }, delay);\n    }\n}\n\n// 下划线转换驼峰\nexport function toHump(name) {\n    return name.replace(/\\_(\\w)/g, function(all, letter){\n        return letter.toUpperCase();\n    });\n}\n// 驼峰转换下划线\nexport function toLine(name) {\n  return name.replace(/([A-Z])/g,\"_$1\").toLowerCase();\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [372], () => (__webpack_require__(277)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"./\";","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t277: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkboss_show_time\"] = self[\"webpackChunkboss_show_time\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","LEVEL_TRACE","LEVEL_DEBUG","LEVEL_INFO","logLevel","infoLog","message","console","log","trace","warn","Map","Job","jobId","jobPlatform","jobUrl","jobName","jobCompanyName","jobLocationName","jobAddress","jobLongitude","jobLatitude","jobDescription","jobDegreeName","jobYear","jobSalaryMin","jobSalaryMax","jobSalaryTotalMonth","bossName","bossCompanyName","bossPosition","dataSource","createDatetime","updateDatetime","JobDTO","browseCount","ChangeLog","getSqlList","ChangeLogV1","db","changelogListInstance","WorkerBridge","init","param","changelogList","push","initChangeLog","print","printErr","then","sqlite3","initDb","postSuccessMessage","e","postErrorMessage","ping","addOrUpdateJobBrowse","now","Date","SQL_JOB_BY_ID","rows","exec","sql","rowMode","bind","resultRows","length","SQL_INSERT_JOB","$job_id","$job_platform","$job_url","$job_name","$job_company_name","$job_location_name","$job_address","$job_longitude","$job_latitude","$job_description","$job_degree_name","$job_year","$job_salary_min","$job_salary_max","$job_salary_total_month","jobSalaryTotal","$boss_name","$boss_company_name","$boss_position","$data_source","$create_datetime","format","$update_datetime","SQL_INSERT_JOB_BROWSE_HISTORY","$job_visit_datetime","$job_visit_type","getJobBrowseInfoByIds","countMap","ids","join","SQL_QUERY_JOB_BOWSE_HISTORY_GROUP_COUNT","countRows","i","item","set","total","tempResultMap","SQL_QUERY_JOB","resultItem","keys","Object","n","key","name","replace","all","letter","toUpperCase","result","j","target","get","ACTION_FUNCTION","capi","oo","oo1","sqlite3_libversion","sqlite3_sourceid","OpfsDb","filename","DB","oldVersion","newVersion","SQL_CREATE_TABLE_VERSION","SQL_QUERY_VERSION","num","SQL_INSERT_VERSION","$num","currentVersion","sqlList","seq","SQL_UPDATE_VERSION","error","data","resultMessage","JSON","parse","stringify","postMessage","type","onmessage","action","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","splice","r","getter","__esModule","d","a","definition","o","defineProperty","enumerable","f","chunkId","Promise","reduce","promises","u","obj","prop","prototype","hasOwnProperty","p","b","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","moreModules","runtime","pop"],"sourceRoot":""}