(()=>{"use strict";var e,o,a={277:(e,o,a)=>{const t=0,n=1,s=2,r=s;function i(e){r<=s&&console.log(e)}function b(e){r==t?console.trace(e):r==n&&console.warn(e)}var _=a(556),l=a(353),j=a.n(l);new Map;class m{jobId;jobPlatform;jobUrl;jobName;jobCompanyName;jobLocationName;jobAddress;jobLongitude;jobLatitude;jobDescription;jobDegreeName;jobYear;jobSalaryMin;jobSalaryMax;jobSalaryTotalMonth;bossName;bossCompanyName;bossPosition;dataSource;createDatetime;updateDatetime}class c extends m{browseCount}class d{getSqlList(){return[]}}class p extends d{getSqlList(){return["\n  CREATE TABLE job(\n    job_id TEXT PRIMARY KEY,\n    job_platform TEXT,\n    job_url TEXT, \n    job_name TEXT,\n    job_company_name TEXT,\n    job_location_name TEXT,\n    job_address TEXT,\n    job_longitude NUMERIC,\n    job_latitude NUMERIC,\n    job_description TEXT,\n    job_degree_name TEXT,\n    job_year TEXT,\n    job_salary_min TEXT,\n    job_salary_max TEXT,\n    job_salary_total_month TEXT,\n    boss_name TEXT,\n    boss_company_name  TEXT,\n    boss_position TEXT,\n    data_source TEXT,\n    create_datetime DATETIME,\n    update_datetime DATETIME\n  )\n  ","\n  CREATE TABLE job_browse_history(\n    job_id TEXT,\n    job_visit_datetime DATETIME,\n    job_visit_type TEXT\n  )\n  "]}}var u,T=[];b("worker ready");const y={init:function(e,o){b("Loading and initializing sqlite3 module...");let a=[];a.push(new p),function(e){T=e}(a),(0,_.A)({print:b,printErr:i}).then((function(o){b("Done initializing. Running app...");try{h(o),$(e)}catch(o){w(e,"init sqlite3 error : "+o.message)}}))},ping:function(e,o){$(e,"pong")},addOrUpdateJobBrowse:function(e,o){try{const t=new Date,n="SELECT job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,boss_name,boss_company_name,boss_position,data_source,create_datetime,update_datetime FROM job WHERE job_id = ?";var a=[];if(u.exec({sql:"BEGIN TRANSACTION"}),u.exec({sql:n,rowMode:"object",bind:[o.jobId],resultRows:a}),a.length>0);else{const e="\n      INSERT INTO job (job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,boss_name,boss_company_name,boss_position,data_source,create_datetime,update_datetime) VALUES ($job_id,$job_platform,$job_url,$job_name,$job_company_name,$job_location_name,$job_address,$job_longitude,$job_latitude,$job_description,$job_degree_name,$job_year,$job_salary_min,$job_salary_max,$job_salary_total_month,$boss_name,$boss_company_name,$boss_position,$data_source,$create_datetime,$update_datetime)\n    ";u.exec({sql:e,bind:{$job_id:o.jobId,$job_platform:o.jobPlatform,$job_url:o.jobUrl,$job_name:o.jobName,$job_company_name:o.jobCompanyName,$job_location_name:o.jobLocationName,$job_address:o.jobAddress,$job_longitude:o.jobLongitude,$job_latitude:o.jobLatitude,$job_description:o.jobDescription,$job_degree_name:o.jobDegreeName,$job_year:o.jobYear,$job_salary_min:o.jobSalaryMin,$job_salary_max:o.jobSalaryMax,$job_salary_total_month:o.jobSalaryTotal,$boss_name:o.bossName,$boss_company_name:o.bossCompanyName,$boss_position:o.bossPosition,$data_source:o.dataSource,$create_datetime:j()(t).format("YYYY-MM-DD HH:mm:ss"),$update_datetime:j()(t).format("YYYY-MM-DD HH:mm:ss")}})}const s="\n    INSERT INTO job_browse_history (job_id,job_visit_datetime,job_visit_type) VALUES ($job_id,$job_visit_datetime,$job_visit_type)\n  ";u.exec({sql:s,bind:{$job_id:o.jobId,$job_visit_datetime:j()(t).format("YYYY-MM-DD HH:mm:ss"),$job_visit_type:"SEARCH"}}),u.exec({sql:"COMMIT"}),$(e,{})}catch(o){w(e,"[worker] addOrUpdateJobBrowse error : "+o.message)}},getJobBrowseInfoByIds:function(e,o){try{var a=new Map,t="'"+o.join("','")+"'";const d="SELECT job_id AS jobId ,count(*) AS total FROM job_browse_history WHERE job_id IN ("+t+") GROUP BY job_id;";var n=[];u.exec({sql:d,rowMode:"object",resultRows:n});for(let e=0;e<n.length;e++){let o=n[e];a.set(o.jobId,o.total)}var s=new Map;const p="SELECT job_id,job_platform,job_url,job_name,job_company_name,job_location_name,job_address,job_longitude,job_latitude,job_description,job_degree_name,job_year,job_salary_min,job_salary_max,job_salary_total_month,boss_name,boss_company_name,boss_position,data_source,create_datetime,update_datetime FROM job WHERE job_id in ("+t+")";var r=[];u.exec({sql:p,rowMode:"object",resultRows:r});for(var i=0;i<r.length;i++){var b=r[i],_=new c,l=Object.keys(b);for(let e=0;e<l.length;e++){var j=l[e];_[(m=j,m.replace(/\_(\w)/g,(function(e,o){return o.toUpperCase()})))]=b[j]}s.set(_.jobId,_)}let T=[];for(let e=0;e<o.length;e++){let t=o[e],n=s.get(t);n.browseCount=a.get(t),T.push(n)}$(e,T)}catch(o){w(e,"[worker] getJobBrowseInfoByIds error : "+o.message)}var m}},g=new Map;for(var f=Object.keys(y),E=0;E<f.length;E++){var v=f[E];g.set(v,y[v])}const h=function(e){const o=e.capi,a=e.oo1;b("SQLite3 version",o.sqlite3_libversion(),o.sqlite3_sourceid()),"OpfsDb"in a?(u=new a.OpfsDb("/job.sqlite3"),b("[DB] The OPFS is available."),b("[DB] Persisted db =",u.filename)):(u=new a.DB("/job.sqlite3","ct"),b("[DB] The OPFS is not available."),b("[DB] transient db =",u.filename)),i("[DB] schema checking...");let t=T,n=0,s=t.length;try{u.exec({sql:"BEGIN TRANSACTION"});const e="\n    CREATE TABLE IF NOT EXISTS version(\n      num INTEGER\n    )\n  ";u.exec(e);const o="SELECT num FROM version";var r=[];if(u.exec({sql:o,rowMode:"object",resultRows:r}),r.length>0)n=r[0].num;else{const e="INSERT INTO version(num) values($num)";u.exec({sql:e,bind:{$num:0}})}if(i("[DB] schema oldVersion = "+n+", newVersion = "+s),s>n){i("[DB] schema upgrade start");for(let e=n;e<s;e++){let o=e+1,a=t[e].getSqlList();i("[DB] schema upgrade changelog version = "+o+", sql total = "+a.length);for(let e=0;e<a.length;e++){i("[DB] schema upgrade changelog version = "+o+", execute sql = "+(e+1)+"/"+a.length);let t=a[e];u.exec(t)}}const e="UPDATE version SET num = $num";u.exec({sql:e,bind:{$num:s}}),i("[DB] schema upgrade finish to version = "+s),i("[DB] current schema version = "+s)}else i("[DB] skip schema upgrade"),i("[DB] current schema version = "+n);u.exec({sql:"COMMIT"})}catch(e){console.error("[DB] schema upgrade fail,"+e.message),u.exec({sql:"ROLLBACK TRANSACTION"})}};function $(e,o){var a=JSON.parse(JSON.stringify(e));a.data=o,postMessage({type:"db",data:a}),b("[worker][send][worker -> offscreen] message = "+JSON.stringify(a))}function w(e,o){i(o);var a=JSON.parse(JSON.stringify(e));b(a),a.error=o,postMessage({type:"db",data:a}),b("[worker][send][worker -> offscreen] message = "+JSON.stringify(a))}onmessage=function(e){var o=e.data;b("[worker][receive][offscreen -> worker] message = "+JSON.stringify(o));var a=o.action;b("[worker] invoke action = "+a),g.get(a)(o,o.param)}}},t={};function n(e){var o=t[e];if(void 0!==o)return o.exports;var s=t[e]={exports:{}};return a[e].call(s.exports,s,s.exports,n),s.exports}n.m=a,n.x=()=>{var e=n.O(void 0,[372],(()=>n(277)));return n.O(e)},e=[],n.O=(o,a,t,s)=>{if(!a){var r=1/0;for(l=0;l<e.length;l++){for(var[a,t,s]=e[l],i=!0,b=0;b<a.length;b++)(!1&s||r>=s)&&Object.keys(n.O).every((e=>n.O[e](a[b])))?a.splice(b--,1):(i=!1,s<r&&(r=s));if(i){e.splice(l--,1);var _=t();void 0!==_&&(o=_)}}return o}s=s||0;for(var l=e.length;l>0&&e[l-1][2]>s;l--)e[l]=e[l-1];e[l]=[a,t,s]},n.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return n.d(o,{a:o}),o},n.d=(e,o)=>{for(var a in o)n.o(o,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:o[a]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce(((o,a)=>(n.f[a](e,o),o)),[])),n.u=e=>e+".js",n.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),n.p="./",(()=>{n.b=self.location+"";var e={277:1};n.f.i=(o,a)=>{e[o]||importScripts(n.p+n.u(o))};var o=self.webpackChunkboss_show_time=self.webpackChunkboss_show_time||[],a=o.push.bind(o);o.push=o=>{var[t,s,r]=o;for(var i in s)n.o(s,i)&&(n.m[i]=s[i]);for(r&&r(n);t.length;)e[t.pop()]=1;a(o)}})(),o=n.x,n.x=()=>n.e(372).then(o),n.x()})();
//# sourceMappingURL=277.js.map